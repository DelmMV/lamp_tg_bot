/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å callback-–∑–∞–ø—Ä–æ—Å–∞–º–∏
 * @module callbackManager
 */

// –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ callback –¥–∞–Ω–Ω—ã—Ö
const callbackHandlers = new Map();

/**
 * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ callback –¥–∞–Ω–Ω—ã—Ö
 * @param {string} prefix - –ü—Ä–µ—Ñ–∏–∫—Å callback –¥–∞–Ω–Ω—ã—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, "approve_")
 * @param {Function} handler - –§—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ callback
 */
function registerCallbackHandler(prefix, handler) {
  callbackHandlers.set(prefix, handler);
  console.log(`üìù Registered callback handler for prefix: ${prefix}`);
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–π callback –∑–∞–ø—Ä–æ—Å
 * @async
 * @param {Object} bot - –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ Telegraf
 * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç callback –∑–∞–ø—Ä–æ—Å–∞
 * @returns {Promise<boolean>} - –ë—ã–ª –ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω callback
 */
async function processCallback(bot, ctx) {
  try {
    const data = ctx.callbackQuery?.data;
    
    if (!data) {
      console.log('‚ö†Ô∏è Empty callback data received');
      return false;
    }
    
    console.log(`üîÑ Processing callback data: ${data}`);
    
    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ –ø—Ä–µ—Ñ–∏–∫—Å—É
    for (const [prefix, handler] of callbackHandlers.entries()) {
      if (data.startsWith(prefix)) {
        console.log(`üéØ Found handler for prefix: ${prefix}`);
        
        // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
        await ctx.answerCbQuery('–ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º...');
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –¥–∞–Ω–Ω—ã—Ö
        const userId = data.substring(prefix.length);
        
        // –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å –Ω—É–∂–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        await handler(bot, ctx, userId);
        return true;
      }
    }
    
    console.log(`‚ö†Ô∏è No handler found for callback data: ${data}`);
    await ctx.answerCbQuery('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞');
    return false;
  } catch (error) {
    console.error('‚ùå Error processing callback:', error);
    try {
      await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ' + error.message.substring(0, 50));
    } catch (e) {
      console.error('‚ùå Failed to send error callback answer:', e);
    }
    return false;
  }
}

module.exports = {
  registerCallbackHandler,
  processCallback
};
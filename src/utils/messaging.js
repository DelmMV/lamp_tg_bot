/**
 * –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram
 * @module messaging
 */

const {
	isUserAccessError,
	isRateLimitError,
	isCallbackQueryExpired,
	formatUserAccessError,
} = require('./errorHandler')
const { ADMIN_CHAT_ID, LAMP_THREAD_ID } = require('../config')

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
 * @async
 * @param {Object} bot - –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ Telegraf
 * @param {Error} error - –û–±—ä–µ–∫—Ç –æ—à–∏–±–∫–∏
 * @param {Object} context - –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ (–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ/–æ–ø–µ—Ä–∞—Ü–∏–∏)
 * @returns {Promise<void>}
 */
async function notifyAdminsAboutError(bot, error, context = {}) {
	try {
		const {
			userId,
			operation = '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è',
			additionalInfo = '',
		} = context

		// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
		let errorMessage = `‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è</b>\n`

		if (userId) {
			errorMessage += `üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> <a href="tg://user?id=${userId}">${userId}</a>\n`
		}

		errorMessage += `üîÑ <b>–û–ø–µ—Ä–∞—Ü–∏—è:</b> ${operation}\n`
		errorMessage += `‚ùå <b>–û—à–∏–±–∫–∞:</b> ${error.message}\n`

		if (isUserAccessError(error)) {
			errorMessage += `\nüìå <b>–¢–∏–ø –æ—à–∏–±–∫–∏:</b> ${formatUserAccessError(
				error,
				userId || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'
			)}\n`
		} else if (isRateLimitError(error)) {
			errorMessage += `\n‚è±Ô∏è <b>–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ API</b>\n`
		}

		if (additionalInfo) {
			errorMessage += `\n<i>${additionalInfo}</i>`
		}

		// –î–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤
		if (!isUserAccessError(error) && !isRateLimitError(error)) {
			const stackTrace = error.stack
				? error.stack.split('\n').slice(0, 3).join('\n')
				: '–°—Ç–µ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
			errorMessage += `\n<pre>${stackTrace}</pre>`
		}

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º, –Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–∞–º–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
		await bot.telegram
			.sendMessage(ADMIN_CHAT_ID, errorMessage, {
				message_thread_id: LAMP_THREAD_ID,
				parse_mode: 'HTML',
				// –î–ª—è –æ—à–∏–±–æ–∫ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–∫–ª—é—á–∞–µ–º –∑–≤—É–∫–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
				disable_notification: isUserAccessError(error),
			})
			.catch(e =>
				console.error('Failed to send error notification to admins:', e.message)
			)
	} catch (notifyError) {
		console.error('Error sending admin notification about error:', notifyError)
	}
}

/**
 * –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ callback –∑–∞–ø—Ä–æ—Å —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
 * @async
 * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegraf
 * @param {string} text - –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
 * @param {Object} [options={}] - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
 * @returns {Promise<boolean>} - –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏
 */
async function safeAnswerCallback(ctx, text, options = {}) {
	try {
		await ctx.answerCbQuery(text, options)
		return true
	} catch (error) {
		// –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö callback –∑–∞–ø—Ä–æ—Å–æ–≤
		if (isCallbackQueryExpired(error)) {
			console.log('‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏–π callback –∑–∞–ø—Ä–æ—Å:', text)
			return false
		}

		console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ callback –∑–∞–ø—Ä–æ—Å:', error)
		return false
	}
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
 * @async
 * @param {Object} bot - –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ Telegraf
 * @param {number|string} chatId - ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
 * @param {string} message - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
 * @param {Object} [options={}] - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏—è
 * @param {Object} [errorOptions={}] - –û–ø—Ü–∏–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫
 * @returns {Promise<Object|null>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ null –ø—Ä–∏ –æ—à–∏–±–∫–µ
 * @throws {Error} - –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏, –Ω–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
 */
async function sendTelegramMessage(
	bot,
	chatId,
	message,
	options = {},
	errorOptions = {}
) {
	try {
		return await bot.telegram.sendMessage(chatId, message, options)
	} catch (error) {
		console.error(`Error sending message to ${chatId}:`, error.message)

		// –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ USER_ID_INVALID
		if (error.message.includes('USER_ID_INVALID')) {
			console.error(
				`‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${chatId} –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏–ª –∞–∫–∫–∞—É–Ω—Ç –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞)`
			)

			// –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
			await notifyAdminsAboutError(bot, error, {
				userId: chatId,
				operation: errorOptions.context || '–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è',
				additionalInfo:
					'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏–ª –∞–∫–∫–∞—É–Ω—Ç –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞)',
			})

			return null
		}

		// –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –∑–∞–ø—Ä–æ—Å–æ–≤, –ø—Ä–æ–±—É–µ–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å
		if (isRateLimitError(error)) {
			const retryAfter = error.parameters?.retry_after || 1
			console.log(`Rate limited. Retrying after ${retryAfter} seconds...`)

			await new Promise(resolve => setTimeout(resolve, retryAfter * 1000))
			return sendTelegramMessage(bot, chatId, message, options, errorOptions)
		}

		// –ö–ª—é—á–µ–≤–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –æ—à–∏–±–æ–∫
		// –ö–†–û–ú–ï —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ —è–≤–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è –æ—à–∏–±–æ–∫ –¥–æ—Å—Ç—É–ø–∞
		const skipNotification =
			isUserAccessError(error) && errorOptions.skipUserAccessErrors === true

		if (!skipNotification) {
			await notifyAdminsAboutError(bot, error, {
				userId: chatId,
				operation: errorOptions.context || '–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è',
				additionalInfo: errorOptions.additionalInfo || '',
			})
		}

		// –û—à–∏–±–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–µ –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º, –∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null
		if (isUserAccessError(error)) {
			return null
		}

		// –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–ª—å—à–µ
		throw error
	}
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
 * @async
 * @param {Object} bot - –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ Telegraf
 * @param {number|string} chatId - ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞
 * @param {Object} content - –ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
 * @param {Object} [options={}] - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
 * @param {Object} [errorOptions={}] - –û–ø—Ü–∏–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫
 * @returns {Promise<Object|null>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞
 */
async function sendTelegramMedia(
	bot,
	chatId,
	content,
	options = {},
	errorOptions = {}
) {
	try {
		return await bot.telegram.sendCopy(chatId, content, options)
	} catch (error) {
		console.error(`Error sending media to ${chatId}:`, error.message)

		// –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –∑–∞–ø—Ä–æ—Å–æ–≤, –ø—Ä–æ–±—É–µ–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å
		if (isRateLimitError(error)) {
			const retryAfter = error.parameters?.retry_after || 1
			console.log(`Rate limited. Retrying after ${retryAfter} seconds...`)

			await new Promise(resolve => setTimeout(resolve, retryAfter * 1000))
			return sendTelegramMedia(bot, chatId, content, options, errorOptions)
		}

		// –ö–ª—é—á–µ–≤–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –æ—à–∏–±–æ–∫
		// –ö–†–û–ú–ï —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ —è–≤–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è –æ—à–∏–±–æ–∫ –¥–æ—Å—Ç—É–ø–∞
		const skipNotification =
			isUserAccessError(error) && errorOptions.skipUserAccessErrors === true

		if (!skipNotification) {
			await notifyAdminsAboutError(bot, error, {
				userId: chatId,
				operation: errorOptions.context || '–û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞',
				additionalInfo: errorOptions.additionalInfo || '',
			})
		}

		// –û—à–∏–±–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–µ –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º, –∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null
		if (isUserAccessError(error)) {
			return null
		}

		// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π –æ—à–∏–±–∫–∏
		if (error.response) {
			console.error('Error details:', JSON.stringify(error.response, null, 2))
		}

		throw error
	}
}

module.exports = {
	sendTelegramMessage,
	sendTelegramMedia,
	safeAnswerCallback,
	notifyAdminsAboutError,
}

const { Telegraf } = require("telegraf");
const { MongoClient, ObjectId } = require('mongodb');
const { connectToDatabase, closeDatabase } = require("./db");
const { BOT_TOKEN, MONO_PITER_CHAT_ID, MEDIA_THREAD_ID, MONGO_URL, DB_NAME } = require("./config");
const { containsForbiddenWords } = require("./utils/contentFilter");
const { hasMediaHashtag } = require("./utils/helpers");
const { sendTelegramMessage, sendTelegramMedia } = require("./utils/messaging");
const { handleMediaGroup, handleSingleMessage } = require("./handlers/mediaHandler");
const { 
  handleDeleteCommand, 
  handleAlarmCommand, 
  checkForbiddenWords, 
  handleHashtagMedia, 
  handlePrivateMessage 
} = require("./handlers/messageHandler");
const { 
  handleNewChatMembers, 
  handleChatJoinRequest 
} = require("./handlers/userHandler");
const { 
  handleJoinRequestCallback, 
  sendAdminQuestion, 
  handleUserReply 
} = require("./handlers/joinRequestHandler");

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new Telegraf(BOT_TOKEN);

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
bot.command('delete', ctx => handleDeleteCommand(bot, ctx));
bot.command('alarm', ctx => handleAlarmCommand(bot, ctx));

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
bot.on('new_chat_members', ctx => handleNewChatMembers(bot, ctx));
bot.on('chat_join_request', ctx => handleChatJoinRequest(bot, ctx));

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤ (–∫–Ω–æ–ø–∫–∏)
bot.on('callback_query', async (ctx) => {
  console.log('üì¢ –ü–æ–ª—É—á–µ–Ω callback –∑–∞–ø—Ä–æ—Å:', ctx.callbackQuery.data);
  try {
    // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
    await ctx.answerCbQuery('–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å...');
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∑–∞—è–≤–æ–∫
    await handleJoinRequestCallback(bot, ctx);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback –∑–∞–ø—Ä–æ—Å–∞:', error);
    try {
      await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ' + error.message.substring(0, 200));
    } catch (e) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ callback:', e);
    }
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏–π
bot.on(['photo', 'video'], async (ctx) => {
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ö—ç—à—Ç–µ–≥–æ–º #media/#–º–µ–¥–∏–∞
  if (ctx.message.caption && hasMediaHashtag(ctx.message.caption)) {
    if (ctx.message.media_group_id) {
      try {
        const messages = await ctx.telegram.getUpdates({
          allowed_updates: ['message'],
          limit: 50
        }).then(res => res
          .map(update => update.message)
          .filter(message => message && message.media_group_id === ctx.message.media_group_id)
        );
        await handleMediaGroup(bot, ctx, messages);
      } catch (error) {
        console.error('Error fetching media group:', error);
      }
    } else {
      await handleSingleMessage(bot, ctx);
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ñ–æ—Ç–æ
  if (ctx.message.chat.type === "private") {
    await handlePrivateMessage(bot, ctx);
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (ctx) => {
  try {
    console.log('üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:', 
      ctx.message.text ? 
      ctx.message.text.substring(0, 50) + (ctx.message.text.length > 50 ? '...' : '') : 
      '[–Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ]'
    );
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ª–∏—á–Ω—ã–º
    if (ctx.message.chat.type === "private") {
      console.log('üë§ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è');
      
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
      const isUserReply = await handleUserReply(bot, ctx);
      
      // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      if (!isUserReply) {
        const isHandled = await handlePrivateMessage(bot, ctx);
        if (isHandled) return; // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
      }
      
      return; // –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –∑–∞–ø—Ä–æ—Å –≤–æ–ø—Ä–æ—Å–∞
    if (ctx.message.reply_to_message) {
      console.log('üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ');
      const isHandled = await sendAdminQuestion(bot, ctx);
      if (isHandled) {
        console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–∞–∫ –≤–æ–ø—Ä–æ—Å –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
        return; // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–∞–∫ –≤–æ–ø—Ä–æ—Å, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
    const hasForbiddenWords = await checkForbiddenWords(bot, ctx);
    if (hasForbiddenWords) {
      console.log('üö´ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞');
      return;
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ö—ç—à—Ç–µ–≥–æ–≤ –º–µ–¥–∏–∞ –≤ –æ—Ç–≤–µ—Ç–∞—Ö –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    await handleHashtagMedia(bot, ctx);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err, ctx) => {
  console.error(`Bot error occurred: ${err.message}`);
  console.error('Error context:', err.stack);
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ –≤ —Å–ª—É—á–∞–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ—Ç–ª–∞–¥–∫–∏
  if (ctx) {
    console.error('Error context chat:', ctx.chat?.id);
    console.error('Error context user:', ctx.from?.id);
  }
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async function startBot() {
  try {
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await connectToDatabase();
    
    // –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –≤–∫–ª—é—á–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ API
    await bot.launch({
      allowedUpdates: [
        'message', 
        'edited_message', 
        'channel_post', 
        'edited_channel_post', 
        'callback_query',
        'chat_join_request'
      ],
      dropPendingUpdates: true
    });
    
    console.log('üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
    setupGracefulShutdown();
  } catch (error) {
    console.error('Failed to start bot:', error);
    process.exit(1);
  }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
function setupGracefulShutdown() {
  process.once('SIGINT', async () => {
    console.log('SIGINT received. Shutting down...');
    await closeDatabase();
    bot.stop('SIGINT');
  });
  
  process.once('SIGTERM', async () => {
    console.log('SIGTERM received. Shutting down...');
    await closeDatabase();
    bot.stop('SIGTERM');
  });
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
startBot();
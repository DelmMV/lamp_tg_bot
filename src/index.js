const { Telegraf } = require('telegraf')
const { MongoClient, ObjectId } = require('mongodb')
const {
	connectToDatabase,
	closeDatabase,
	checkAndCancelExpiredRequests,
} = require('./db')
const {
	BOT_TOKEN,
	MONO_PITER_CHAT_ID,
	MEDIA_THREAD_ID,
	ADMIN_CHAT_ID,
	LAMP_THREAD_ID,
	JOIN_REQUEST,
} = require('./config')
const { containsForbiddenWords } = require('./utils/contentFilter')
const { hasMediaHashtag } = require('./utils/helpers')
const { sendTelegramMessage, sendTelegramMedia } = require('./utils/messaging')
const {
	isUserAccessError,
	formatUserAccessError,
} = require('./utils/errorHandler')
const {
	handleMediaGroup,
	handleSingleMessage,
} = require('./handlers/mediaHandler')
const {
	handleDeleteCommand,
	handleAlarmCommand,
	checkForbiddenWords,
	handleHashtagMedia,
	handlePrivateMessage,
} = require('./handlers/messageHandler')
const {
	handleNewChatMembers,
	handleChatJoinRequest,
} = require('./handlers/userHandler')
const {
	handleJoinRequestCallback,
	sendAdminQuestion,
	handleUserReply,
} = require('./handlers/joinRequestHandler')
const {
	startRequestCheckTimer,
	stopRequestCheckTimer,
	connectToDatabase: connectRequestCheckDb,
	handleBanButton,
	handleConfirmBan,
	handleCancelBan,
	handleAcceptButton,
	handleConfirmAccept,
	handleCancelAccept,
} = require('./handlers/requestCheckHandler')
const { handleSummaryCommand } = require('./handlers/summaryHandler')
const { storeMessage } = require('./utils/chatStorage')
const { generateChatSummary, sendSummaryToAdmin } = require('./utils/gemini')
const { getLast24HoursMessages } = require('./utils/chatStorage')

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
let bot = null

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–æ—Ç–∞ Telegram
 * @returns {Telegraf} –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
 */
function initBot() {
	try {
		const newBot = new Telegraf(BOT_TOKEN)
		console.log('ü§ñ –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω')
		return newBot
	} catch (error) {
		console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞:', error)
		throw error
	}
}

/**
 * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
 * @param {Telegraf} botInstance - –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
 */
function setupCommandHandlers(botInstance) {
	try {
		// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
		botInstance.command('delete', ctx => handleDeleteCommand(botInstance, ctx))
		botInstance.command('alarm', ctx => handleAlarmCommand(botInstance, ctx))
		botInstance.command('summary', ctx =>
			handleSummaryCommand(botInstance, ctx)
		)
		console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã')
	} catch (error) {
		console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥:', error)
		throw error
	}
}

/**
 * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * @param {Telegraf} botInstance - –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
 */
function setupUserEventHandlers(botInstance) {
	try {
		botInstance.on('new_chat_members', ctx =>
			handleNewChatMembers(botInstance, ctx)
		)
		botInstance.on('chat_join_request', ctx =>
			handleChatJoinRequest(botInstance, ctx)
		)
		console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã')
	} catch (error) {
		console.error(
			'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:',
			error
		)
		throw error
	}
}

/**
 * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤ (–∫–Ω–æ–ø–∫–∏)
 * @param {Telegraf} botInstance - –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
 */
function setupCallbackQueryHandler(botInstance) {
	try {
		botInstance.on('callback_query', async ctx => {
			console.log('üì¢ –ü–æ–ª—É—á–µ–Ω callback –∑–∞–ø—Ä–æ—Å:', ctx.callbackQuery.data)

			// –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, —á—Ç–æ –º—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ callback
			let callbackAnswered = false

			try {
				// –°—Ä–∞–∑—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥
				await ctx.answerCbQuery('–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å...')
				callbackAnswered = true

				const data = ctx.callbackQuery.data

				// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å —Å –∫–Ω–æ–ø–∫–∞–º–∏ –±–∞–Ω–∞
				if (data.startsWith('ban_user:')) {
					await handleBanButton(ctx)
					return
				}

				if (data.startsWith('confirm_ban:')) {
					await handleConfirmBan(ctx)
					return
				}

				if (data.startsWith('cancel_ban:')) {
					await handleCancelBan(ctx)
					return
				}

				// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø—Ä–∏–Ω—è—Ç–∏—è
				if (data.startsWith('accept_user:')) {
					await handleAcceptButton(ctx)
					return
				}

				if (data.startsWith('confirm_accept:')) {
					await handleConfirmAccept(ctx)
					return
				}

				if (data.startsWith('cancel_accept:')) {
					await handleCancelAccept(ctx)
					return
				}

				// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∑–∞—è–≤–æ–∫
				await handleJoinRequestCallback(botInstance, ctx)
			} catch (error) {
				console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback –∑–∞–ø—Ä–æ—Å–∞:', error)

				try {
					// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
					await sendTelegramMessage(
						botInstance,
						ADMIN_CHAT_ID,
						`‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback</b>:\n<code>${ctx.callbackQuery.data}</code>\n\n${error.message}`,
						{ message_thread_id: LAMP_THREAD_ID, parse_mode: 'HTML' }
					)

					// –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º—ã –µ—â–µ –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ callback
					if (!callbackAnswered && !isCallbackQueryExpired(error)) {
						await ctx
							.answerCbQuery(
								'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ' + error.message.substring(0, 200)
							)
							.catch(e => {
								// –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏–π callback
								if (!isCallbackQueryExpired(e)) {
									console.error(
										'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ callback –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏:',
										e
									)
								}
							})
					}
				} catch (notifyError) {
					console.error(
						'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ:',
						notifyError
					)
				}
			}
		})
		console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω')
	} catch (error) {
		console.error(
			'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤:',
			error
		)
		throw error
	}
}

/**
 * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏–π
 * @param {Telegraf} botInstance - –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
 */
function setupMediaHandlers(botInstance) {
	try {
		botInstance.on(['photo', 'video'], async ctx => {
			try {
				// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ö—ç—à—Ç–µ–≥–æ–º #media/#–º–µ–¥–∏–∞
				if (ctx.message.caption && hasMediaHashtag(ctx.message.caption)) {
					if (ctx.message.media_group_id) {
						try {
							const messages = await ctx.telegram
								.getUpdates({
									allowed_updates: ['message'],
									limit: 50,
								})
								.then(res =>
									res
										.map(update => update.message)
										.filter(
											message =>
												message &&
												message.media_group_id === ctx.message.media_group_id
										)
								)
							await handleMediaGroup(botInstance, ctx, messages)
						} catch (error) {
							console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã:', error)

							// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
							await sendTelegramMessage(
								botInstance,
								ADMIN_CHAT_ID,
								`‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã</b>:\n${error.message}`,
								{ message_thread_id: LAMP_THREAD_ID, parse_mode: 'HTML' }
							)
						}
					} else {
						await handleSingleMessage(botInstance, ctx)
					}
				}

				// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ñ–æ—Ç–æ
				if (ctx.message.chat.type === 'private') {
					await handlePrivateMessage(botInstance, ctx)
				}
			} catch (error) {
				console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏—è:', error)

				// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
				await sendTelegramMessage(
					botInstance,
					ADMIN_CHAT_ID,
					`‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏—è</b>:\n${error.message}`,
					{ message_thread_id: LAMP_THREAD_ID, parse_mode: 'HTML' }
				)
			}
		})
		console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã')
	} catch (error) {
		console.error(
			'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –º–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏–π:',
			error
		)
		throw error
	}
}

/**
 * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
 * @param {Telegraf} botInstance - –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
 */
function setupMessageHandler(botInstance) {
	try {
		botInstance.on('message', async ctx => {
			try {
				// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
				storeMessage(ctx.message)

				// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ª–∏—á–Ω—ã–º
				if (ctx.message.chat.type === 'private') {
					const messagePreview = ctx.message.text
						? ctx.message.text.substring(0, 50) +
						  (ctx.message.text.length > 50 ? '...' : '')
						: '[–Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ]'

					console.log('üì© –ü–æ–ª—É—á–µ–Ω–æ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', messagePreview)

					// –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
					const isUserReply = await handleUserReply(botInstance, ctx)

					// –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
					if (!isUserReply) {
						const isHandled = await handlePrivateMessage(botInstance, ctx)
						if (isHandled) return // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
					}

					return // –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
				}

				// –î–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –∏–∑ –ª–∏—á–Ω–æ–≥–æ —á–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —É—Å–ª–æ–≤–∏—è
				if (ctx.message.reply_to_message) {
					const isHandled = await sendAdminQuestion(botInstance, ctx)
					if (isHandled) return
				}

				// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
				const hasForbiddenWords = await checkForbiddenWords(botInstance, ctx)
				if (hasForbiddenWords) return

				// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ö—ç—à—Ç–µ–≥–æ–≤ –º–µ–¥–∏–∞ –≤ –æ—Ç–≤–µ—Ç–∞—Ö –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
				await handleHashtagMedia(botInstance, ctx)
			} catch (error) {
				console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error)

				// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º, –µ—Å–ª–∏ —ç—Ç–æ —Å–µ—Ä—å–µ–∑–Ω–∞—è –æ—à–∏–±–∫–∞
				if (!isUserAccessError(error)) {
					await sendTelegramMessage(
						botInstance,
						ADMIN_CHAT_ID,
						`‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è</b>:\n${error.message}`,
						{ message_thread_id: LAMP_THREAD_ID, parse_mode: 'HTML' }
					)
				}
			}
		})
		console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω')
	} catch (error) {
		console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π:', error)
		throw error
	}
}

/**
 * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –±–æ—Ç–∞
 * @param {Telegraf} botInstance - –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
 */
function setupErrorHandler(botInstance) {
	botInstance.catch(async (err, ctx) => {
		console.error(`‚ùå –û—à–∏–±–∫–∞ –±–æ—Ç–∞: ${err.message}`)
		console.error('–°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', err.stack)

		try {
			// –°–æ–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
			let errorContext = '–ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è'
			let userId = null

			if (ctx) {
				errorContext += ` (—Ç–∏–ø: ${ctx.updateType || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'})`
				userId = ctx.from?.id
			}

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
			await logError(botInstance, err, errorContext, {
				userId,
				functionName: 'Telegraf global error handler',
			})
		} catch (notifyError) {
			console.error(
				'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ:',
				notifyError
			)
		}
	})

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
	process.on('uncaughtException', async error => {
		try {
			await logError(botInstance, error, '–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ', {
				functionName: 'process.uncaughtException',
			})
		} catch (e) {
			console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –∏—Å–∫–ª—é—á–µ–Ω–∏—è:', e)
		}

		// –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –º–æ–∂–Ω–æ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç—É —Å—Ç—Ä–æ–∫—É,
		// —á—Ç–æ–±—ã –±–æ—Ç –Ω–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–ª—Å—è –ø—Ä–∏ –∫–∞–∂–¥–æ–π –æ—à–∏–±–∫–µ
		// process.exit(1);
	})

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—Ç–∫–∞–∑–æ–≤ –ø—Ä–æ–º–∏—Å–æ–≤
	process.on('unhandledRejection', async (reason, promise) => {
		try {
			const error = reason instanceof Error ? reason : new Error(String(reason))
			await logError(botInstance, error, '–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –æ—Ç–∫–∞–∑ –ø—Ä–æ–º–∏—Å–∞', {
				functionName: 'process.unhandledRejection',
			})
		} catch (e) {
			console.error(
				'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –æ—Ç–∫–∞–∑–∞ –ø—Ä–æ–º–∏—Å–∞:',
				e
			)
		}
	})

	console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –±–æ—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω')
}

/**
 * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π –∏ –æ—Ç–∫–∞–∑–æ–≤ –ø—Ä–æ–º–∏—Å–æ–≤
 */
function setupProcessErrorHandlers() {
	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
	process.on('uncaughtException', async error => {
		console.error('‚ùå –ù–µ–ø–æ–π–º–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:', error)

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ
		try {
			if (bot) {
				await bot.telegram
					.sendMessage(
						ADMIN_CHAT_ID,
						`‚ö†Ô∏è <b>–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ë–û–¢–ê</b>\n\n<pre>${
							error.stack || error.message
						}</pre>`,
						{ message_thread_id: LAMP_THREAD_ID, parse_mode: 'HTML' }
					)
					.catch(e =>
						console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ:', e)
					)
			}
		} catch (e) {
			console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ:', e)
		}

		// –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –º–æ–∂–Ω–æ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–æ–∫—É,
		// —á—Ç–æ–±—ã –±–æ—Ç –Ω–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–ª—Å—è –ø—Ä–∏ –∫–∞–∂–¥–æ–π –æ—à–∏–±–∫–µ
		// process.exit(1);
	})

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—Ç–∫–∞–∑–æ–≤ –ø—Ä–æ–º–∏—Å–æ–≤
	process.on('unhandledRejection', async (reason, promise) => {
		console.error('‚ùå –ù–µ–ø–æ–π–º–∞–Ω–Ω—ã–π –æ—Ç–∫–∞–∑ –ø—Ä–æ–º–∏—Å–∞:', reason)

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –æ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–º –æ—Ç–∫–∞–∑–µ –ø—Ä–æ–º–∏—Å–∞
		try {
			if (bot) {
				await bot.telegram
					.sendMessage(
						ADMIN_CHAT_ID,
						`‚ö†Ô∏è <b>–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –æ—Ç–∫–∞–∑ –ø—Ä–æ–º–∏—Å–∞</b>\n\n<pre>${
							reason.stack || String(reason)
						}</pre>`,
						{ message_thread_id: LAMP_THREAD_ID, parse_mode: 'HTML' }
					)
					.catch(e =>
						console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ:', e)
					)
			}
		} catch (e) {
			console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ:', e)
		}
	})

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
	process.on('SIGINT', async () => {
		console.log('üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...')
		await safeShutdown('SIGINT')
	})

	process.on('SIGTERM', async () => {
		console.log('üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...')
		await safeShutdown('SIGTERM')
	})

	console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã')
}

/**
 * –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
 * @async
 * @param {string} signal - –°–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
 */
async function safeShutdown(signal) {
	console.log(`\n${signal} –ø–æ–ª—É—á–µ–Ω. –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...`)

	try {
		// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞—è–≤–æ–∫
		stopRequestCheckTimer()

		// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞
		if (bot) {
			await bot.stop(signal)
			console.log('ü§ñ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
		}

		// –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
		await closeDatabase()
		console.log('üì¶ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ')

		process.exit(0)
	} catch (error) {
		console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã:', error)
		process.exit(1)
	}
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–≤–æ–¥–∫–∏
async function sendDailySummary(bot) {
	try {
		// –ü–æ–ª—É—á–∞–µ–º ID —á–∞—Ç–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–∑ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã MONO_PITER_CHAT_ID
		const messages = await getLast24HoursMessages(MONO_PITER_CHAT_ID)
		if (messages.length === 0) return

		// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É
		const summary = await generateChatSummary(messages)

		// –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
		const title = `üìä <b>–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞ —á–∞—Ç–∞</b>\n\n`

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É
		await sendTelegramMessage(bot, ADMIN_CHAT_ID, title + summary, {
			message_thread_id: LAMP_THREAD_ID,
			parse_mode: 'HTML',
		})
	} catch (error) {
		console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏:', error)
	}
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–≤–æ–¥–∫–∏
function setupDailySummaryTimer(bot) {
	// –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ª–Ω–æ—á–∏
	const now = new Date()
	const tomorrow = new Date(now)
	tomorrow.setDate(tomorrow.getDate() + 1)
	tomorrow.setHours(0, 0, 0, 0)

	const timeUntilMidnight = tomorrow - now

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ –ø–æ–ª–Ω–æ—á—å
	setTimeout(() => {
		sendDailySummary(bot)
		// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞
		setInterval(() => sendDailySummary(bot), 24 * 60 * 60 * 1000)
	}, timeUntilMidnight)

	console.log('‚úÖ –¢–∞–π–º–µ—Ä –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω')
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞
 * @async
 */
async function startBot() {
	try {
		console.log('üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...')

		// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
		bot = initBot()

		// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
		await connectToDatabase()
		console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')

		// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞—è–≤–æ–∫
		await connectRequestCheckDb()
		console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞—è–≤–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')

		// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
		setupCommandHandlers(bot)
		setupUserEventHandlers(bot)
		setupCallbackQueryHandler(bot)
		setupMediaHandlers(bot)
		setupMessageHandler(bot)
		setupErrorHandler(bot)
		setupProcessErrorHandlers()

		// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞—è–≤–æ–∫
		startRequestCheckTimer(bot)

		// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏
		setupDailySummaryTimer(bot)

		// –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
		await bot.launch()
		console.log('üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω')

		// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
		process.once('SIGINT', () => safeShutdown('SIGINT'))
		process.once('SIGTERM', () => safeShutdown('SIGTERM'))
	} catch (error) {
		console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:', error)
		process.exit(1)
	}
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
startBot()

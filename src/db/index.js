/**
 * –ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
 * @module db
 */

const { MongoClient, ObjectId } = require('mongodb');
const { MONGO_URL, DB_NAME, ADMIN_CHAT_ID, LAMP_THREAD_ID } = require('../config');

/** @type {import('mongodb').Db} */
let db = null;

/**
 * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
 * @async
 * @returns {Promise<import('mongodb').Db>} –≠–∫–∑–µ–º–ø–ª—è—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
 * @throws {Error} –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
 */
async function connectToDatabase() {
  try {
    // –£–¥–∞–ª–µ–Ω—ã —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –æ–ø—Ü–∏–∏ useNewUrlParser –∏ useUnifiedTopology
    // –≠—Ç–∏ –æ–ø—Ü–∏–∏ –≤–∫–ª—é—á–µ–Ω—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–∞—á–∏–Ω–∞—è —Å MongoDB Driver 4.0.0
    const client = new MongoClient(MONGO_URL);
    
    await client.connect();
    db = client.db(DB_NAME);
    console.log("Connected to MongoDB");
    return db;
  } catch (error) {
    console.error("MongoDB connection error:", error);
    throw error;
  }
}

/**
 * –£–¥–∞–ª—è–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ ID
 * @async
 * @param {string} commentId - ID –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
 * @returns {Promise<{success: boolean, message: string}>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
 */
async function deleteComment(commentId) {
  try {
    const commentsCollection = db.collection('comments');
    const result = await commentsCollection.deleteOne({ _id: new ObjectId(commentId) });
    
    return {
      success: result.deletedCount === 1,
      message: result.deletedCount === 1
        ? `–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å ID ${commentId} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.`
        : `–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å ID ${commentId} –Ω–µ –Ω–∞–π–¥–µ–Ω.`
    };
  } catch (error) {
    console.error('Error deleting comment:', error);
    return {
      success: false,
      message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è.'
    };
  }
}

/**
 * –ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
 * @async
 * @returns {Promise<void>}
 */
async function closeDatabase() {
  if (db) {
    try {
      const client = db.client;
      await client.close();
      console.log("Disconnected from MongoDB");
    } catch (error) {
      console.error("Error closing MongoDB connection:", error);
    }
  }
}

/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—Ä–æ—Å–µ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ —á–∞—Ç
 * @async
 * @param {Object} requestData - –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ
 * @returns {Promise<string>} - ID —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏
 */
async function saveJoinRequest(requestData) {
  try {
    const joinRequestsCollection = db.collection('joinRequests');
    const result = await joinRequestsCollection.insertOne({
      ...requestData,
      status: 'pending',
      createdAt: new Date(),
      replies: []
    });
    
    return result.insertedId.toString();
  } catch (error) {
    console.error('Error saving join request:', error);
    throw error;
  }
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ
 * @async
 * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string} status - –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞
 * @returns {Promise<boolean>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
 */
async function updateJoinRequestStatus(userId, status) {
  try {
    const joinRequestsCollection = db.collection('joinRequests');
    const result = await joinRequestsCollection.updateOne(
      { userId: parseInt(userId, 10) },
      { 
        $set: { 
          status: status,
          updatedAt: new Date()
        } 
      },
      { sort: { createdAt: -1 } }
    );
    
    return result.modifiedCount > 0;
  } catch (error) {
    console.error('Error updating join request status:', error);
    return false;
  }
}

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
 * @async
 * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string} message - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
 * @param {string} sender - –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å (admin –∏–ª–∏ user)
 * @returns {Promise<boolean>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
 */
async function addMessageToJoinRequest(userId, message, sender) {
  try {
    const joinRequestsCollection = db.collection('joinRequests');
    const result = await joinRequestsCollection.updateOne(
      { userId: parseInt(userId, 10) },
      { 
        $push: { 
          replies: {
            message,
            sender,
            timestamp: new Date()
          }
        } 
      },
      { sort: { createdAt: -1 } }
    );
    
    return result.modifiedCount > 0;
  } catch (error) {
    console.error('Error adding message to join request:', error);
    return false;
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—Ä–æ—Å–µ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –ø–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @async
 * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns {Promise<Object|null>} - –î–∞–Ω–Ω—ã–µ –æ –∑–∞–ø—Ä–æ—Å–µ –∏–ª–∏ null
 */
async function getJoinRequestByUserId(userId) {
  try {
    const joinRequestsCollection = db.collection('joinRequests');
    return await joinRequestsCollection.findOne(
      { userId: parseInt(userId, 10) },
      { sort: { createdAt: -1 } }
    );
  } catch (error) {
    console.error('Error getting join request:', error);
    return null;
  }
}

/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @async
 * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {number} messageId - ID —Å–æ–æ–±—â–µ–Ω–∏—è
 * @returns {Promise<boolean>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
 */
 async function saveUserButtonMessage(userId, messageId) {
   try {
     const collection = db.collection('buttonMessages');
     
     await collection.insertOne({
       userId: parseInt(userId, 10),
       messageId: messageId,
       chatId: ADMIN_CHAT_ID,
       threadId: LAMP_THREAD_ID,
       createdAt: new Date()
     });
     
     console.log(`‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ ID: ${messageId} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
     return true;
   } catch (error) {
     console.error('‚ùå Error saving button message:', error);
     return false;
   }
 }

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ ID —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @async
 * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns {Promise<Array>} - –ú–∞—Å—Å–∏–≤ ID —Å–æ–æ–±—â–µ–Ω–∏–π
 */
 async function getUserButtonMessages(userId) {
   try {
     const collection = db.collection('buttonMessages');
     
     const messages = await collection.find({ 
       userId: parseInt(userId, 10) 
     }).toArray();
     
     console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
     return messages;
   } catch (error) {
     console.error('‚ùå Error getting button messages:', error);
     return [];
   }
 }

module.exports = {
  connectToDatabase,
  closeDatabase,
  deleteComment,
  saveJoinRequest, 
  updateJoinRequestStatus, 
  addMessageToJoinRequest, 
  getJoinRequestByUserId,
  saveUserButtonMessage,
  getUserButtonMessages,
  getDb: () => db
};
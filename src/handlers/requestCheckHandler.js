/**
 * –ú–æ–¥—É–ª—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ—Ç–º–µ–Ω—ã –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫
 * @module handlers/requestCheckHandler
 */

const { MongoClient, ObjectId } = require('mongodb')
const {
	MONGO_URL,
	DB_NAME,
	ADMIN_CHAT_ID,
	LAMP_THREAD_ID,
	MONO_PITER_CHAT_ID,
	JOIN_REQUEST,
} = require('../config')

/** @type {import('mongodb').Db} */
let db = null

// –¢–∞–π–º–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞—è–≤–æ–∫
let checkRequestsTimer = null

/**
 * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
 * @async
 * @returns {Promise<import('mongodb').Db>} –≠–∫–∑–µ–º–ø–ª—è—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
 */
async function connectToDatabase() {
	try {
		const client = new MongoClient(MONGO_URL)
		await client.connect()
		db = client.db(DB_NAME)
		console.log('Connected to MongoDB')
		return db
	} catch (error) {
		console.error('MongoDB connection error:', error)
		throw error
	}
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ—Ç–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
 * @async
 * @param {Telegraf} bot - –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 * @returns {Promise<Array<Object>>} –°–ø–∏—Å–æ–∫ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫
 */
async function checkAndCancelExpiredRequests(bot) {
	try {
		const joinRequestsCollection = db.collection('joinRequests')
		const now = new Date()
		const lifetimeMinutes = JOIN_REQUEST.LIFETIME_MINUTES

		// –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
		const expiredRequests = await joinRequestsCollection
			.find({
				status: 'pending',
				createdAt: {
					$lt: new Date(now.getTime() - lifetimeMinutes * 60 * 1000),
				},
			})
			.toArray()

		// –û—Ç–º–µ–Ω—è–µ–º –∫–∞–∂–¥—É—é –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—É—é –∑–∞—è–≤–∫—É
		const canceledRequests = []
		for (const request of expiredRequests) {
			try {
				// –û—Ç–∫–ª–æ–Ω—è–µ–º –∑–∞—è–≤–∫—É –≤ Telegram
				await bot.telegram.declineChatJoinRequest(
					MONO_PITER_CHAT_ID,
					request.userId
				)

				// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
				const result = await joinRequestsCollection.updateOne(
					{ _id: request._id },
					{
						$set: {
							status: 'expired',
							updatedAt: new Date(),
						},
					}
				)

				if (result.modifiedCount > 0) {
					canceledRequests.push(request)

					// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
					try {
						const hours = Math.floor(lifetimeMinutes / 60)
						const minutes = lifetimeMinutes % 60
						const timeFormat =
							hours > 0 ? `${hours} —á. ${minutes} –º–∏–Ω.` : `${minutes} –º–∏–Ω.`

						await bot.telegram.sendMessage(
							request.userId,
							`‚ö†Ô∏è <b>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞</b>\n\n` +
								`–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –∏—Å—Ç–µ–∫–ª–æ (${timeFormat})\n` +
								`–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è`,
							{ parse_mode: 'HTML' }
						)
					} catch (userNotifyError) {
						console.error(
							`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${request.userId}:`,
							userNotifyError
						)
					}

					// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω-–∫–∞–Ω–∞–ª
					const adminHours = Math.floor(lifetimeMinutes / 60)
					const adminMinutes = lifetimeMinutes % 60
					const adminTimeFormat =
						adminHours > 0
							? `${adminHours} —á. ${adminMinutes} –º–∏–Ω.`
							: `${adminMinutes} –º–∏–Ω.`

					await bot.telegram.sendMessage(
						ADMIN_CHAT_ID,
						`‚ö†Ô∏è <b>–ó–∞—è–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞</b>\n\n` +
							`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <a href="tg://user?id=${request.userId}">${
								request.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'
							}</a>\n` +
							`‚è± –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: ${request.createdAt.toLocaleString()}\n` +
							`‚è≥ –í—Ä–µ–º—è –∂–∏–∑–Ω–∏: ${adminTimeFormat}`,
						{
							message_thread_id: LAMP_THREAD_ID,
							parse_mode: 'HTML',
						}
					)
				}
			} catch (error) {
				console.error(
					`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${request.userId}:`,
					error
				)

				// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ –∞–¥–º–∏–Ω-–∫–∞–Ω–∞–ª
				await bot.telegram.sendMessage(
					ADMIN_CHAT_ID,
					`‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞—è–≤–∫–∏</b>\n\n` +
						`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <a href="tg://user?id=${request.userId}">${
							request.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'
						}</a>\n` +
						`‚ùå –û—à–∏–±–∫–∞: ${error.message}`,
					{
						message_thread_id: LAMP_THREAD_ID,
						parse_mode: 'HTML',
					}
				)
			}
		}

		return canceledRequests
	} catch (error) {
		console.error('Error checking and canceling expired requests:', error)
		return []
	}
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∑–∞—è–≤–æ–∫
 * @param {Telegraf} botInstance - –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
 */
function startRequestCheckTimer(botInstance) {
	try {
		// –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
		if (checkRequestsTimer) {
			clearInterval(checkRequestsTimer)
		}

		// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ä–∞–∑—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
		checkAndCancelExpiredRequests(botInstance).catch(error => {
			console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞—è–≤–æ–∫:', error)
		})

		// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
		checkRequestsTimer = setInterval(() => {
			checkAndCancelExpiredRequests(botInstance).catch(error => {
				console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞—è–≤–æ–∫:', error)
			})
		}, JOIN_REQUEST.CHECK_INTERVAL_MINUTES * 60 * 1000)

		console.log('‚úÖ –¢–∞–π–º–µ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞—è–≤–æ–∫ –∑–∞–ø—É—â–µ–Ω')
	} catch (error) {
		console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–∞–π–º–µ—Ä–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞—è–≤–æ–∫:', error)
	}
}

/**
 * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–∞–π–º–µ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞—è–≤–æ–∫
 */
function stopRequestCheckTimer() {
	if (checkRequestsTimer) {
		clearInterval(checkRequestsTimer)
		checkRequestsTimer = null
		console.log('‚úÖ –¢–∞–π–º–µ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞—è–≤–æ–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
	}
}

module.exports = {
	connectToDatabase,
	checkAndCancelExpiredRequests,
	startRequestCheckTimer,
	stopRequestCheckTimer,
}

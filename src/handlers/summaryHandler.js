const { generateChatSummary, sendSummaryToAdmin } = require('../utils/gemini')
const {
	getLast24HoursMessages,
	getMessagesByDateRange,
} = require('../utils/chatStorage')
const {
	ADMIN_CHAT_ID,
	MONO_PITER_CHAT_ID,
	LAMP_THREAD_ID,
} = require('../config')
const { sendTelegramMessage } = require('../utils/messaging')

/**
 * –ü–∞—Ä—Å–∏—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã summary
 * @param {string} text - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
 * @returns {Object} –û–±—ä–µ–∫—Ç —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
 */
function parseSummaryArgs(text) {
	// –§–æ—Ä–º–∞—Ç: /summary [chatId] [days|date1-date2]
	const args = text.split(' ').filter(arg => arg.trim().length > 0)

	// –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —á–∞—Ç–∞
	const result = {
		chatId: MONO_PITER_CHAT_ID,
		period: '1', // 1 –¥–µ–Ω—å
		startDate: null,
		endDate: null,
	}

	if (args.length > 1) {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç chatId
		if (!isNaN(args[1])) {
			result.chatId = args[1]
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –ø–µ—Ä–∏–æ–¥–∞
		if (args.length > 2) {
			const periodArg = args[args.length - 1]

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã (date1-date2)
			if (periodArg.includes('-')) {
				const [start, end] = periodArg.split('-')
				try {
					// –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY
					const parseDate = dateStr => {
						const [day, month, year] = dateStr.split('.')
						return new Date(parseInt(year), parseInt(month) - 1, parseInt(day))
					}

					result.startDate = parseDate(start)
					// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω–µ—Ü –¥–Ω—è –¥–ª—è –∫–æ–Ω–µ—á–Ω–æ–π –¥–∞—Ç—ã
					result.endDate = parseDate(end)
					result.endDate.setHours(23, 59, 59, 999)

					// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞—Ç
					if (isNaN(result.startDate) || isNaN(result.endDate)) {
						result.startDate = null
						result.endDate = null
					} else {
						result.period = 'custom'
					}
				} catch (error) {
					console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –¥–∞—Ç:', error)
				}
			} else if (!isNaN(periodArg)) {
				// –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–æ —á–∏—Å–ª–æ –¥–Ω–µ–π
				result.period = periodArg
			}
		}
	}

	return result
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
 * @param {Object} params - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
 * @returns {Promise<Array>} –ú–∞—Å—Å–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
 */
async function getMessagesForSummary(params) {
	const { chatId, period, startDate, endDate } = params

	if (period === 'custom' && startDate && endDate) {
		return await getMessagesByDateRange(chatId, startDate, endDate)
	} else {
		// –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –ø–µ—Ä–∏–æ–¥ –≤ –¥–Ω—è—Ö, –Ω–æ –Ω–µ 1
		if (period !== '1') {
			const daysAgo = parseInt(period)
			const startDate = new Date()
			startDate.setDate(startDate.getDate() - daysAgo)
			startDate.setHours(0, 0, 0, 0)

			const endDate = new Date()

			return await getMessagesByDateRange(chatId, startDate, endDate)
		} else {
			// –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–ª—É—á–∞–π - –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
			return await getLast24HoursMessages(chatId)
		}
	}
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–∏–æ–¥–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @param {Object} params - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
 * @returns {string} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
 */
function formatPeriodInfo(params) {
	const { period, startDate, endDate } = params

	if (period === 'custom' && startDate && endDate) {
		const formatDate = date => {
			return date.toLocaleDateString('ru-RU')
		}
		return `—Å ${formatDate(startDate)} –ø–æ ${formatDate(endDate)}`
	} else if (period === '1') {
		return '–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞'
	} else {
		return `–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ ${period} –¥–Ω–µ–π`
	}
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –∫–æ–º–∞–Ω–¥—ã /summary
 * @param {Context} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
 */
async function sendSummaryHelp(ctx) {
	const helpText = `
<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /summary:</b>

–ë–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: —Å–≤–æ–¥–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —á–∞—Ç–∞
<code>/summary</code>

–° —É–∫–∞–∑–∞–Ω–∏–µ–º —á–∞—Ç–∞: —Å–≤–æ–¥–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞
<code>/summary [chat_id]</code>

–° —É–∫–∞–∑–∞–Ω–∏–µ–º –ø–µ—Ä–∏–æ–¥–∞ –≤ –¥–Ω—è—Ö:
<code>/summary [chat_id] [–∫–æ–ª-–≤–æ_–¥–Ω–µ–π]</code>

–° —É–∫–∞–∑–∞–Ω–∏–µ–º –ø–µ—Ä–∏–æ–¥–∞ –¥–∞—Ç (—Ñ–æ—Ä–º–∞—Ç DD.MM.YYYY):
<code>/summary [chat_id] [–Ω–∞—á–∞–ª—å–Ω–∞—è_–¥–∞—Ç–∞-–∫–æ–Ω–µ—á–Ω–∞—è_–¥–∞—Ç–∞]</code>

–ü—Ä–∏–º–µ—Ä—ã:
<code>/summary</code> - –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —á–∞—Ç–∞
<code>/summary -1001234567890</code> - –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞
<code>/summary 7</code> - –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —á–∞—Ç–∞
<code>/summary -1001234567890 7</code> - –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞
<code>/summary 01.05.2023-10.05.2023</code> - –ø–µ—Ä–∏–æ–¥ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —á–∞—Ç–∞
<code>/summary -1001234567890 01.05.2023-10.05.2023</code> - –ø–µ—Ä–∏–æ–¥ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞
`

	await ctx.reply(helpText, { parse_mode: 'HTML' })
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /summary
 * @param {Telegraf} bot - –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
 * @param {Context} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
 */
async function handleSummaryCommand(bot, ctx) {
	try {
		// –û—Ç–ª–∞–¥–∫–∞: –≤—ã–≤–æ–¥–∏–º ID —á–∞—Ç–∞ –∏ ID –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
		console.log(
			`üìä –ö–æ–º–∞–Ω–¥–∞ /summary: chat.id=${ctx.chat.id}, ADMIN_CHAT_ID=${ADMIN_CHAT_ID}`
		)

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –≤ –∞–¥–º–∏–Ω —á–∞—Ç–µ (—É—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã)
		const chatIdStr = ctx.chat.id.toString()
		const adminChatIdStr = ADMIN_CHAT_ID.toString()

		if (chatIdStr !== adminChatIdStr) {
			console.log(`‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω: ${chatIdStr} !== ${adminChatIdStr}`)
			await ctx.reply('–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –∞–¥–º–∏–Ω —á–∞—Ç–µ')
			return
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—Ä–æ—à–µ–Ω–∞ –ª–∏ —Å–ø—Ä–∞–≤–∫–∞
		if (
			ctx.message.text.includes('help') ||
			ctx.message.text.includes('–ø–æ–º–æ—â—å')
		) {
			await sendSummaryHelp(ctx)
			return
		}

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
		const processingMsg = await ctx.reply('üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å–≤–æ–¥–∫—É...')

		// –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
		const params = parseSummaryArgs(ctx.message.text)

		// –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
		const messages = await getMessagesForSummary(params)

		if (messages.length === 0) {
			await ctx.telegram.editMessageText(
				ctx.chat.id,
				processingMsg.message_id,
				null,
				`‚ùå –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π ${formatPeriodInfo(params)}`
			)
			return
		}

		// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É
		const summary = await generateChatSummary(messages)

		// –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–µ—Ä–∏–æ–¥–µ
		const periodInfo = formatPeriodInfo(params)
		const title = `üìä <b>–°–≤–æ–¥–∫–∞ —á–∞—Ç–∞ ${periodInfo}</b>\n\n`

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É —Å –ø–æ–ª–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
		await sendTelegramMessage(bot, ADMIN_CHAT_ID, title + summary, {
			message_thread_id: LAMP_THREAD_ID,
			parse_mode: 'HTML',
		})

		// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
		await ctx.telegram.deleteMessage(ctx.chat.id, processingMsg.message_id)
	} catch (error) {
		console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /summary:', error)
		await ctx.reply(
			'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–≤–æ–¥–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /summary help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏.'
		)
	}
}

module.exports = {
	handleSummaryCommand,
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
 * @module messageHandler
 */

 const { containsForbiddenWords } = require('../utils/contentFilter');
 const { sendTelegramMessage } = require('../utils/messaging');
 const { hasMediaHashtag } = require('../utils/helpers');
 const { deleteComment, getJoinRequestByUserId, saveUserButtonMessage } = require('../db');
 const { ADMIN_CHAT_ID, MONO_PITER_CHAT_ID, LAMP_THREAD_ID } = require('../config');
 const { handleMediaGroup, handleSingleMessage } = require('./mediaHandler');

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
 * @async
 * @param {Object} bot - –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ Telegraf
 * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è Telegraf
 */
async function handleDeleteCommand(bot, ctx) {
  if (ctx.message.chat.id !== ADMIN_CHAT_ID) return;
  
  const [, commentId] = ctx.message.text.split(' ');
  if (!commentId) {
    return await ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /delete <commentId>');
  }
  
  try {
    const result = await deleteComment(commentId);
    await ctx.reply(result.message);
  } catch (error) {
    console.error('Error processing delete command:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è.');
  }
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É —Ç—Ä–µ–≤–æ–≥–∏
 * @async
 * @param {Object} bot - –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ Telegraf
 * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è Telegraf
 */
async function handleAlarmCommand(bot, ctx) {
  const [, ...textParts] = ctx.message.text.split(' ');
  const text = textParts.join(' ');
  
  if (!text.includes(',')) {
    return await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é —Ç–µ–∫—Å—Ç —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /alarm.');
  }
  
  const [description, link] = text.split(',').map(part => part.trim());
  
  if (!/^(http|https):\/\/.*/i.test(link)) {
    return await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.');
  }
  
  const message = `
–ù–æ–≤—ã–π —Ç—Ä–µ–≤–æ–∂–Ω—ã–π —Å–∏–≥–Ω–∞–ª –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <a href="tg://user?id=${ctx.message.from.id}">${ctx.message.from.first_name} ${ctx.message.from.last_name || ""}</a>:
–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç: ${link}
–û–ø–∏—Å–∞–Ω–∏–µ: ${description}
  `.trim();
  
  await sendTelegramMessage(bot, ADMIN_CHAT_ID, message, { 
    message_thread_id: LAMP_THREAD_ID, 
    parse_mode: 'HTML' 
  });
  await ctx.reply('–í–∞—à —Ç—Ä–µ–≤–æ–∂–Ω—ã–π —Å–∏–≥–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
 * @async
 * @param {Object} bot - –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ Telegraf
 * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è Telegraf
 * @returns {Promise<boolean>} - –ù–∞–π–¥–µ–Ω—ã –ª–∏ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
 */
async function checkForbiddenWords(bot, ctx) {
  const messageText = ctx.message.text;
  if (!messageText || ctx.message.chat.id !== MONO_PITER_CHAT_ID) return false;
  
  try {
    const result = containsForbiddenWords(messageText);
    if (result.found) {
      const messageLink = `https://t.me/${ctx.message.chat.username}/${ctx.message.message_thread_id}/${ctx.message.message_id}`;
      
      // –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      await ctx.reply(
        `–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ —Å–ª–æ–≤–æ: <tg-spoiler>${result.word}</tg-spoiler>. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–æ–±–ª—é–¥–∞–π—Ç–µ –∫—É–ª—å—Ç—É—Ä—É –æ–±—â–µ–Ω–∏—è –Ω–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞.`,
        {
          reply_to_message_id: ctx.message.message_id,
          parse_mode: 'HTML'
        }
      );
      
      // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
      const adminMessage = `–í <a href="${messageLink}">—Å–æ–æ–±—â–µ–Ω–∏–∏</a> –æ—Ç <a href="tg://user?id=${ctx.message.from.id}">${ctx.message.from.first_name} ${ctx.message.from.last_name || ""}</a> –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–ª–æ–≤–∞!\n–ó–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ: "${result.word}"`;
      
      await sendTelegramMessage(bot, ADMIN_CHAT_ID, adminMessage, {
        message_thread_id: LAMP_THREAD_ID,
        parse_mode: 'HTML'
      });
      
      return true;
    }
  } catch (error) {
    console.error('Error checking forbidden words:', error);
  }
  
  return false;
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ö—ç—à—Ç–µ–≥–æ–º –º–µ–¥–∏–∞
 * @async
 * @param {Object} bot - –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ Telegraf
 * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è Telegraf
 */
async function handleHashtagMedia(bot, ctx) {
  const replyMessage = ctx.message.reply_to_message;
  if (!replyMessage) return;
  
  if (hasMediaHashtag(ctx.message.text)) {
    if (replyMessage.media_group_id) {
      try {
        const messages = await ctx.telegram.getUpdates({
          allowed_updates: ['message'],
          limit: 50
        }).then(res => res
          .map(update => update.message.text ? update.message.reply_to_message : update.message)
          .filter(message => message && message.media_group_id === replyMessage.media_group_id)
        );
        await handleMediaGroup(bot, ctx, messages);
      } catch (error) {
        console.error('Error handling media group with hashtag:', error);
      }
    } else {
      await handleSingleMessage(bot, ctx);
    }
  }
}

/**
 * –ü–µ—Ä–µ—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
 * @async
 * @param {Object} bot - –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ Telegraf
 * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è Telegraf
 * @param {Object} from - –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
 * @returns {Promise<boolean>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
 */
 async function forwardMessageToAdmins(bot, ctx, from) {
   const userLink = `<a href="tg://user?id=${from.id}">${from.first_name} ${from.last_name || ""}</a>`;
   const username = from.username ? `@${from.username}` : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç';
   
   // –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —Å —Ç–µ–∫—Å—Ç–æ–º
   const messageContent = ctx.message.text || '[–Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞]';
   const adminMessage = `
 üì• <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞—è–≤–∫–æ–π</b>
 
 üë§ <b>–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:</b> ${userLink}
 üÜî <b>ID:</b> <code>${from.id}</code>
 üë§ <b>Username:</b> ${username}
 
 üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>
 ${messageContent}
   `.trim();
   
   // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
   const sentMsg = await sendTelegramMessage(bot, ADMIN_CHAT_ID, adminMessage, {
     message_thread_id: LAMP_THREAD_ID,
     parse_mode: 'HTML',
     // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å –∑–∞—è–≤–∫–æ–π
     reply_markup: {
       inline_keyboard: [
         [
           { text: '‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å', callback_data: `ask_${from.id}` }
         ]
       ]
     }
   });
   
   // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤ –ë–î
   await saveUserButtonMessage(from.id, sentMsg.message_id);
   
   // –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –æ—Ç–¥–µ–ª—å–Ω–æ
   if (ctx.message.photo || ctx.message.video) {
     await bot.telegram.sendCopy(ADMIN_CHAT_ID, ctx.message, { 
       message_thread_id: LAMP_THREAD_ID,
       caption: `üìé –ú–µ–¥–∏–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userLink} (ID: ${from.id})`,
       parse_mode: 'HTML'
     });
   }
   
   console.log(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${from.id} –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º`);
   return true;
 }

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞—è–≤–∫–∏
 * @async
 * @param {Object} bot - –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ Telegraf
 * @param {Object} from - –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
 */
async function sendStandardResponseToUser(bot, from) {
  try {
    await sendTelegramMessage(
      bot,
      from.id,
      '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—Å—Ç—É–ø–∏—Ç—å –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –ú–æ–Ω–æ–ü–∏—Ç–µ—Ä, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –≥—Ä—É–ø–ø—É. –ü–æ—á–∏—Ç–∞—Ç—å –æ –Ω–∞—à–µ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–µ –º–æ–∂–Ω–æ –Ω–∞ —ç—Ç–æ–º —Å–∞–π—Ç–µ http://–º–æ–Ω–æ–ø–∏—Ç–µ—Ä.—Ä—Ñ'
    );
    console.log(`‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${from.id}`);
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${from.id}:`, error);
  }
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
 * @async
 * @param {Object} bot - –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ Telegraf
 * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è Telegraf
 */
 async function handlePrivateMessage(bot, ctx) {
   if (ctx.message.chat.type !== "private") return false;
    
   const { from } = ctx.message;
   const userId = from.id;
    
   try {
     console.log(`üì© –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
      
     // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞—è–≤–∫–∞ (–ª—é–±–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞)
     let joinRequest = null;
     try {
       joinRequest = await getJoinRequestByUserId(userId);
     } catch (dbError) {
       console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞—è–≤–∫–µ:', dbError);
       // –ü—Ä–∏ –æ—à–∏–±–∫–µ –ë–î —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –∑–∞—è–≤–∫–∏ –Ω–µ—Ç - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
       await sendStandardResponseToUser(bot, from);
       return true;
     }
      
     // –ï—Å–ª–∏ –∑–∞—è–≤–∫–∏ –Ω–µ—Ç —Å–æ–≤—Å–µ–º - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç
     if (!joinRequest) {
       console.log(`üìé –ó–∞—è–≤–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç`);
       await sendStandardResponseToUser(bot, from);
       return true;
     }
      
     // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏
     console.log(`üìù –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –∏–º–µ–µ—Ç –∑–∞—è–≤–∫—É —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º: ${joinRequest.status}`);
      
     switch (joinRequest.status) {
       case 'pending':
         // –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞—è–≤–∫–∞ - –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
         return await forwardMessageToAdmins(bot, ctx, from);
          
       case 'approved':
         // –ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏
         await sendTelegramMessage(
           bot,
           userId,
           '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞. –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –∏—Ö –≤ –æ–±—â–µ–º —á–∞—Ç–µ –ú–æ–Ω–æ–ü–∏—Ç–µ—Ä–∞.'
         );
         return true;
          
       case 'rejected':
         // –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏
         await sendTelegramMessage(
           bot,
           userId,
           '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–¥–µ–ª–∞–π—Ç–µ —ç—Ç–æ —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω—É—é –≥—Ä—É–ø–ø—É.'
         );
         return true;
          
       default:
         // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å - –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç
         console.log(`‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏: ${joinRequest.status}`);
         await sendStandardResponseToUser(bot, from);
         return true;
     }
   } catch (error) {
     console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ª–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
     
     // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
     try {
       const userLink = `<a href="tg://user?id=${from.id}">${from.first_name} ${from.last_name || ""}</a>`;
       await sendTelegramMessage(bot, ADMIN_CHAT_ID, 
         `‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç ${userLink}</b>:\n\n${error.message}`,
         { message_thread_id: LAMP_THREAD_ID, parse_mode: 'HTML' }
       );
     } catch (sendError) {
       console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º –æ–± –æ—à–∏–±–∫–µ:', sendError);
     }
     
     // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
     try {
       await sendTelegramMessage(
         bot,
         userId,
         '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
       );
     } catch (userMessageError) {
       console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –æ—à–∏–±–∫–µ:', userMessageError);
     }
     
     return true;
   }
 }


 module.exports = {
   handleDeleteCommand,
   handleAlarmCommand,
   checkForbiddenWords,
   handleHashtagMedia,
   handlePrivateMessage,
   forwardMessageToAdmins,
   sendStandardResponseToUser
 };